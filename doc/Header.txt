NAME

        use Beyonwiz::Recording::Header;

SYNOPSIS

    Provides access to the Beyonwiz recording file header.

CONSTANTS

    "TVHDR"
        The name of the header file for a digital TV recording
        ("header.tvwiz").

    "RADHDR"
        The name of the header file for a digital radio recording
        ("header.radwiz").

    "DAY"
        Number of seconds in a day. Used internally for time conversion.

    "MAX_TS_POINT"
        Maximum number of offsets in *offsets* (8640).

    "HDR_SIZE"
        Total size of the header (256kiB).

    "HDR_MAIN_OFF"
    "HDR_MAIN_SIZE"
    "HDR_OFFSETS_OFF"
    "HDR_OFFSETS_SIZE"
    "HDR_BOOKMARKS_OFF"
    "HDR_BOOKMARKS_SZ"
    "HDR_EPISODE_OFF"
    "HDR_EPISODE_SZ"
    "HDR_EXTINFO_OFF"
    "HDR_EXTINFO_SZ"
        Offsets in the header and sizes for the sections of the header file.

METHODS

    "Beyonwiz::Recording::Header->new()"
        Create a new Beyonwiz recording header object.

    "$h->headerName([$val]);"
        Returns (sets) the name of the header document (path part only).

    "$h->headerName([$val]);"
        Returns (sets) the name of the header document (path part only).

    "$h->isTV; $h->isRadio;"
        Returns true if "$h->validMain;" is true and the recording is
        digital TV (resp digital radio). Both can return false if
        "$h->headerName" has not been set.

    "$h->unknown([$val]);"
        Returns (sets) the array reference of the 5 words in the header file
        whose interpretation has not yet been made public.

    "$h->lock([$val]);"
        Returns (sets) lock flag. Possibly the flag that indicates the
        recording has a parental lock set on the Beyonwiz. Unused in WizFX.

    "$h->full([$val]);"
        Returns (sets) the full flag. Purpose unknown. Unused in WizFX.

    "$h->inRec([$val]);"
        Returns (sets) the "currently recording" flag.

    "$h->service([$val]);"
        Returns (sets) the recording service (LCN) name.

    "$h->title([$val]);"
        Returns (sets) the recording title (event name). Returns the
        non-folder part of recording's index name if it has no title set.

    "$h->episode([$val]);"
        Returns (sets) the recording episode name (subtitle).

    "$h->longTitle([$addEpisode[, $sep]];"
        Returns "$h->title . '/' . $h->episode" if the episode name can be
        loaded and is non-empty, otherwise returns "$h->title". If
        $addEpisode is specified and false, the episode name is not added in
        ant case. If $sep is specified, it is used instead of '/' as the
        separator between title and episode name.

    "$h->mjd([$val]);"
        Returns (sets) the recording start date. The name suggests that it
        is the Modified Julian Date, but it isn't.

        "$h->mjd == int(true_MJD + time_zone_offset_in_minutes/(24*60))"
        where "time_zone_offset_in_minutes" is the time zone setting in
        minutes current at the start of the recording.

        The Beyonwiz appears to keep local time rather than UTC as its
        internal time.

    "$h->start([$val]);"
        Returns (sets) number of seconds into the day indicated by "$h->mjd"
        when the recording started.

    "$h->last([$val]); $h->sec([$val]);"
        Return (set) two parameters describing the recording duration. The
        recording duration in seconds is: "$self->last*10 + $self->sec".
        "$h->playtime" is a convenience method that calculates the playtime
        from *last* and *sec*.

    "$h->endOffset([$val]);"
        Return the offset of the logical end of the recording. Returns a
        "bignum".

    "$h->offsets([$val]);"
        Return (set) the table of offsets (possibly at even time intervals?)
        of logical file offsets (as described in "$h->endOffset([$val]);").
        Offsets are returned as "bignum"s.

        If the offsets are at even intervals, it's probably 10 seconds.

        For efficiency reasons, only populated for "$h->load(1)".

    "$h->noffsets;"
        Returns the number of offsets.

    "$h->bookmarks([$val]);"
        Return (set) the table of bookmarks (possibly at even time
        intervals?) of logical file offsets (as described in
        "$h->endOffset([$val]);"). Offsets are returned as "bignum"s.

        For efficiency reasons, only populated for "$h->load(1)".

    "$h->nbookmarks;"
        Returns the number of bookmarks.

    "$h->validMain;"
    "$h->validEpisode;"
    "$h->validExtInfo;"
    "$h->validBookmarks;"
    "$h->validOffsets;"
        Returns true if the last "$h->loadMain;" (resp. "$h->loadEpisode",
        "$h->loadExtInfo", "$h->loadBookmarks", or "$h->loadOffsets") was
        successful.

    "$h->size;"
        Returns the size of the header file (256kB).

    "$h->playtime"
        A convenience method that returns the duration of the recording in
        seconds.

    "$h->starttime"
        Returns a Unix-like timestamp for the start time of the recording in
        local time (rather than in UTC, like a true Unix timestamp). More
        precisely, returns the number of seconds since midnight at the start
        of 1 Jan 1970, *plus* the number of seconds in the timezone offset
        at the time the recording was started.

        This can be converted into the calender/clock fields for the local
        time at the start of the recording using "gmtime" (*not*
        "localtime").

        The local time fields can then be converted into a genuine Unix
        timestamp using "Time::Local::timelocal".

    "$h->offsetTime($offset)"
        Convert an offset into a time. "$h->loadOffsets" must have been
        called, otherwise -1 is returned. Interpolates between values in the
        offset table. Returns 0 if "$offset <= $self->offsets->[0]" and
        "$self->playtime" if "$offset >= $self->endOffset".

    "$h->loadMain;"
    "$h->loadEpisode;"
    "$h->loadExtInfo;"
    "$h->loadBookmarks;"
    "$h->loadOffsets;"
        Load parts of the header object from the header on the Beyonwiz.
        "$h->loadMain" loads the basics, "$h->loadEpisode" loads the episode
        name/subtitle informtion, "$h->loadExtInfo" loads the extended event
        informtion, "$h->loadBookmarks" loads the bookmark information and
        "$h->loadOffsets" loads the 10-second offset data.

    "$h->decodeMain($hdr_data)"
    "$h->decodeEpisode($hdr_data)"
    "$h->decodeExtInfo($hdr_data)"
    "$h->decodeBookmarks($hdr_data)"
    "$h->decodeOffsets($hdr_data)"
        Decodes parts of the header object from $hdr_data on the Beyonwiz.
        The data for each part is assumed to satart at the beginning of the
        respective $hdr_data.

        "$h->decodeMain" decodes the basics, "$h->decodeEpisode" decodes the
        episode name/subtitle informtion, "$h->decodeExtInfo" decodes the
        extended event informtion, "$h->decodeBookmarks" decodes the
        bookmark information and "$h->decodeOffsets" decodes the 10-second
        offset data.

PREREQUISITES

    Uses packages: "Beyonwiz::Utils", "LWP::Simple", "URI", "URI::Escape".

BUGS

    Uses "bignum" for 64-bit integers, even when the underlying Perl
    integers are 64 bits.

    The bugs to do with time are in the Beyonwiz.

