NAME

        use Beyonwiz::Recording::Recording;

SYNOPSIS

    Download recordings from the Beyonwiz.

METHODS

    "Beyonwiz::Recording::Recording->new($class, $accessor, $join,
    $nameFormat, $dateFormat, $resume, $force)"
        Create a new Beyonwiz recording downloader object. $accessor is a
        "Beyonwiz::Recording::Accessor" object used to handle data
        operations on the source recording. If $join is true, the download
        will be into a single ".ts" file, otherwise the recording will be
        copied as it is on the Beyonwiz. $nameFormat and $dateFormat are the
        destination recording name format and date format strings (for dates
        in the name format string). If $resume is true, allow resumption of
        recording download that appear to be incomplete. If $force is true,
        allow a download to overwrite an existing download.

    "$r->accessor([$val]);"
        Returns (sets) the media file accessor object reference.

    "$r->join([$val]);"
        Returns (sets) the flag indicating whether the recording should be
        joined into a single file.

    "$r->date([$val]);"
        Returns (sets) the flag controlling whether the recording date is
        added to the recording name.

    "$r->resume([$val]);"
        Returns (sets) the flag controlling whether a recording resume is
        permitted.

    "$r->force([$val]);"
        Returns (sets) the flag controlling whether a recording forced
        overwrite is permitted.

    "addDir($dir, $name);"
        If $dir is defined and not empty, return $dir prepended to $name,
        otherwise return $name.

    "$r->getRecordingName($hdr, $indexName, $join);"
        $hdr is the recording's header. $indexName is the index name from
        the recording's "Beyonwiz::Recording::IndexEntry". $join is a flag
        to indicate whether a recording folder or single recording or media
        file is to be created from Beyonwiz folder media formats.

    "$r->putFile($name, $file, $outdir, $append, $data)"
        Write the data $data to $file in directory $outdir. Append rather
        than overwrite if $append is true.

    "$r->getRecording($hdr, $trunc, $stat, $indexName, $path, $outdir,
    $progressBar) = @_;"
        Download a Beyonwiz recording, either as a direct copy from the
        Beyonwiz, or combine tham into a single file (if "$r->join" is true
        for Beyonwiz folder media formats). $hdr is the recording's main
        header file object, $trunc is the recording's *trunc* file object
        and $stat is the recording object's Istat> file object. *$indexName*
        is the recording's name, and $path its path name from the
        recording's "Beyonwiz::Recording::IndexEntry". If $outdir is defined
        and not the empty string, the recording is placed in that directory,
        rather than the current directory. The name of the downloaded
        recording is derived from the recording title in the $hdr, with the
        episode name appended if "$r->episode" is true, and there are any
        non-whitespace characters in the episode name and with the recording
        date appended if "$r->date" is true. If $progressBar is not "undef"
        it must be an object in a class implementing the methods
        "$progressBar->total([$val])" and "$progressBar->done([$val])".
        "total" registers the total number of bytes to transfer, and "done"
        updates the number of bytes transferred in the progress bar.

        If "$obj->reconstructed" is true, for any of $hdr, $trunc or $stat,
        then the header files for the respective objects are written from
        the objects instead of being copied from the source recording.

    "$r->renameRecording($hdr, $path, $outdir)"
        Move a recording described by $hdr and the given source $path (from
        the recording's "Beyonwiz::Recording::IndexEntry") to $outdir by
        renaming the recording directory. Returns "RC_OK" if successful.

        On Unix(-like) systems, "renameRecording" will fail if the source
        and destinations for the move are on different file systems. It will
        also fail if "$r->join" is true and it will fail if the source
        recording is on the Beyonwiz. In all these cases, it will return
        "RC_NOT_IMPLEMENTED", and not print a warning.

        For other errors it will print a warning with the system error
        message, and return one of "RC_FORBIDDEN", "RC_NOT_FOUND" or
        "RC_INTERNAL_SERVER_ERROR";

        Returns "RC_NOT_IMPLEMENTED", must be overridden in any derived
        class that can provide this function.

    "$r->deleteRecording($hdr, $trunc, $path)"
        Delete a recording. $hdr is the recording's header file object,
        $trunc is the recording's trunc file object, and $path is the path
        name from the recording's "Beyonwiz::Recording::IndexEntry".

PREREQUISITES

    Uses packages: "Beyonwiz::Recording::Trunc",
    "Beyonwiz::Recording::Header", "Beyonwiz::Utils", "HTTP::Status",
    "File::Spec::Functions", "File::Basename", "POSIX".

BUGS

    The progress callback may have inaccuracies when transferring a
    recording as-is from the Beyonwiz if the recording has been edited or
    made from the timeshift buffer.

    Uses "bignum" for 64-bit integers, even when the underlying Perl
    integers are 64 bits.

