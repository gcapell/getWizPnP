NAME

        use Beyonwiz::Recording::Accessor;

SYNOPSIS

    Provides (mostly) abstract access to media files independent of the
    access method (local files or HTTP).

METHODS

    "Beyonwiz::Recording::Accessor->new($base)"
        Create a new accessor object with the base path $base.

    "$a->base([$val]);"
        Returns (sets) the base path.

    "$a->outFileHandle([$val]);"
        Returns (sets) the accessor's output file handle. Normally set by
        "$a->openRecordingFileOut($self, $rec, $name, $file, $outdir,
        $append, $progressBar)".

    "$a->outFileName([$val]);"
        Returns (sets) the accessor's output file name. Normally set by
        "$a->openRecordingFileOut($self, $rec, $name, $file, $outdir,
        $append, $progressBar)". The name is set even if
        *openRecordingFileOut* fails. Set to "undef" by
        *closeRecordingFileOut*

    "$a->fileLenTime(@path);"
        Return "($size, $modifiedTime)" for the given @path, where the
        components of @path are joined to form a single path name. $size in
        bytes, $modifiedTime is the time the file was last modified as Unix
        time (seconds since 00:00:00 Jan 1 1097 UTC).

    "$a->readFileChunk($offset, $size, @path)"
        Read and return a chunk of the file length $size at offset $offset
        from the file specified by @path where the components of @path are
        joined to form a single path name.

        Returns '' on failure.

        Abstract.

    "$a->readFile(@path)"
        Read and return the contents of the file specified by @path where
        the components of @path are joined to form a single path name.

        Returns "undef" on failure.

        Abstract.

    "$a->loadIndex;"
        Read and return the contents of the WizPnP index file located at
        "$h->base([$val]);".

        Returns "undef" on failure.

        Abstract.

    "$a->openRecordingFileOut($self, $rec, $name, $file, $outdir, $append,
    $progressBar)"
        Open a recording file for output in the local file system.

        $rec is the asociated "Beyonwiz::Recording::Recording". $name is the
        name of the recording folder (or file if "$rec->join" is true).
        $file is the name of the Beyonwiz file containing the data to be
        written. $append is false if $file is to be created, true if it is
        to be appended to. If $outdir is defined and not the empty string,
        the record file is placed in that directory, rather than the current
        directory. Uses $progressBar to properly terminate the progress-bar
        line on errors. If $quiet is true, then don't print an error message
        if the source file can't be found.

        Returns "HTTP_OK" if successful, otherwise some other
        "HTTP_FORBIDDEN" if the file could not be created or opened for
        appending (depending on the value of $append) and prints an
        operating system message describing the error.

    "$a->closeRecordingFileOut"
        Close "$a->outFileHandle". Set "$a->outFileHandle" and
        "$a->outFileName" to "undef".

        Always returns "HTTP_OK".

    "$a->getRecordingFileChunk($rec, $path, $name, $file, $outdir, $append,
    $off, $size, $outOff, $progressBar, $quiet);"
        Fetch a chunk of a recording corresponding to a single
        "Beyonwiz::Recording::TruncEntry".

        $rec is the asociated "Beyonwiz::Recording::Recording". $path is the
        path to the folder containing the recording's files on the Beyonwiz.
        $name is the name of the recording folder or file (if "$rec->join"
        is true). $file is the name of the Beyonwiz file containing the
        chunk. $append is false if $file is to be created, true if it is to
        be appended to. $off and $size is the chunk to be transferred. If
        $outdir is defined and not the empty string, the record file is
        placed in that directory, rather than the current directory. $outoff
        is the offset to where to write the chunk into the output file.
        "$progressBar->done($totalTransferred)" is called at regular
        intervals to update the progress bar and "$progressBar->newLine" is
        used to move to a new line if the progress bar is being drawn on the
        terminal. If $quiet is true, then don't print an error message if
        the source file can't be found.

        Returns "HTTP_OK" if successful. Otherwise it will print a warning
        with the HTTP status message of the HTTP operation that failed, and
        return that status.

        Abstract.

    "$a->getRecordingFile($path, $name, $inFile, $outdir, $outFile,
    $progressBar, $quiet);"
        Fetch a complete 0000, 0001, etc. recording file or header file from
        the Beyonwiz. Note that more than one
        "Beyonwiz::Recording::TruncEntry" may refer to any given file.

        $path, $name, $outdir and $quiet are as in *getRecordingFileChunk*.

        "$progressBar->newLine" is used to move to a new line if the
        progress bar is being drawn on the terminal.

        Returns "HTTP_OK" if successful. Otherwise it will return the HTTP
        error status (or a HTTP status corresponding to the underlying error
        for non-HTTP accessors).

        Abstract.

    "$a->renameRecording($hdr, $path, $outdir)"
        Move a recording described by $hdr and the given source $path (from
        the recording's "Beyonwiz::Recording::IndexEntry") to $outdir by
        renaming the recording directory. Returns "HTTP_OK" if successful.

        On Unix(-like) systems, "renameRecording" will fail if the source
        and destinations for the move are on different file systems. It will
        also fail if "$r->join" is true and it will fail if the source
        recording is on the Beyonwiz. In all these cases, it will return
        "HTTP_NOT_IMPLEMENTED", and not print a warning.

        For other errors it will print a warning with the system error
        message, and return one of "HTTP_FORBIDDEN", "HTTP_NOT_FOUND" or
        "HTTP_INTERNAL_SERVER_ERROR".

        This implementation always does nothing and returns
        HTTP_NOT_IMPLEMENTED.

        Must be implemented in a derived class for it to have any effect.

    "$r->deleteRecordingFile($path, $name, $file)"
        Delete a recording file. $path is the path name from the recording's
        "Beyonwiz::Recording::IndexEntry". $name is the name of the
        recording, and $file is the name of the file within the recording to
        delete.

        Returns "HTTP_OK" if successful. Otherwise it will print a warning
        with the HTTP status message of the HTTP operation that failed, and
        return that status.

        Abstract.

PREREQUISITES

    Uses packages: "HTTP::Status", "File::Spec::Functions",
    "Beyonwiz::Utils" "Beyonwiz::Recording::Recording".

