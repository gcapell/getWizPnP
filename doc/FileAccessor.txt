NAME

        use Beyonwiz::Recording::HTTPAccessor;

SYNOPSIS

    Provides access to media files via HTTP.

SUPERCLASS

    Inherits from "Beyonwiz::Recording::Accessor"

METHODS

    "Beyonwiz::Recording::Accessor->new($base, $extensions)"
        Create a new accessor object with the base URL $base and list of
        extensions to be recognised as media files from the array reference
        $extensions.

    "$a->base([$val]);"
        Returns (sets) the base path.

    "$a->extensions([$val]);"
        Returns (sets) the list of recognised media extensions Expects and
        returns an array reference.

    "$a->fileLenTime(@path);"
        Return "($size, $modifiedTime)" for the given @path, where the
        components of @path are joined to form a single path name.

        Returns the empty list, "()", if the path is not the name of a
        normal file.

        $size in bytes, $modifiedTime is the time the file was last modified
        as Unix time (seconds since 00:00:00 Jan 1 1097 UTC).

    "$a->readFileChunk($offset, $size, @path)"
        Read and return a chunk of the file length $size at offset $offset
        from the file specified by @path where the components of @path are
        joined to form a single path name..

        Returns '' on failure.

    "$a->readFile(@path)"
        Read and return the contents of the file specified by @path where
        the components of @path are joined to form a single path name.

        Returns "undef" on failure.

    "$a->loadIndex;"
        Read and return the contents of the WizPnP index file located at
        "$h->base([$val]);".

        Returns "undef" on failure.

    "$a->getRecordingFileChunk($rec, $path, $file, $off, $size, $outOff,
    $progressBar, $quiet);"
        Fetch a chunk of a recording corresponding to a single
        "Beyonwiz::Recording::TruncEntry" and write it to
        "$self->outFileHandle".

        $rec is the asociated "Beyonwiz::Recording::Recording". $path is the
        path to the folder containing the recording's files on the Beyonwiz.
        $file is the name of the Beyonwiz file containing the chunk. $off
        and $size is the chunk to be transferred. $outoff is the offset to
        where to write the chunk into the output file.
        "$progressBar->done($totalTransferred)" is called at regular
        intervals to update the progress bar and "$progressBar->newLine" is
        used to move to a new line if the progress bar is being drawn on the
        terminal. If $quiet is true, then don't print an error message if
        the source file can't be found.

        Returns "RC_OK" if successful. Otherwise it will print a warning
        with the HTTP status message of the HTTP operation that failed, and
        return that status.

    "$r->getRecordingFile($path, $name, $inFile, $outdir, $outFile,
    $progressBar, $quiet);"
        Fetch a complete 0000, 0001, etc. recording file or header file from
        the Beyonwiz. Note that more than one
        "Beyonwiz::Recording::TruncEntry" may refer to any given file.

        $path, $name, $outdir and $quiet are as in *getRecordingFileChunk*.

        $inFile and $outFile are the names of the input and output files
        within the recording. They are normally only different if for header
        files being retrieved from an incorrect name in the recording.

        "$progressBar->newLine" is used to move to a new line if the
        progress bar is being drawn on the terminal.

        Returns "RC_OK" if successful, or an HTTP error status that
        corresponds with the operating system error that caused the failure.
        If $quiet is false, it will print a warning with the operating
        system error for the operation that failed.

    "$r->renameRecording($hdr, $path, $outdir)"
        Move a recording described by $hdr and the given source $path (from
        the recording's "Beyonwiz::Recording::IndexEntry") to $outdir by
        renaming the recording directory. Returns "RC_OK" if successful.

        On Unix(-like) systems, "renameRecording" will fail if the source
        and destinations for the move are on different file systems. It will
        also fail if "$r->join" is true and it will fail if the source
        recording is on the Beyonwiz. In all these cases, it will return
        "RC_NOT_IMPLEMENTED", and not print a warning.

        For other errors it will print a warning with the system error
        message, and return one of "RC_FORBIDDEN", "RC_NOT_FOUND" or
        "RC_INTERNAL_SERVER_ERROR".

    "$r->deleteRecordingFile($path, $name, $file)"
        Delete a recording file. $path is the path name from the recording's
        "Beyonwiz::Recording::IndexEntry". $name is the name of the
        recording, and $file is the name of the file within the recording to
        delete.

        Returns "RC_OK" if successful. Otherwise it will print a warning
        with the HTTP status message of the HTTP operation that failed, and
        return that status.

PREREQUISITES

    Uses packages: "Beyonwiz::Recording::Accessor",
    "Beyonwiz::Recording::Header", "Beyonwiz::Recording::Trunc",
    "Beyonwiz::Recording::Recording", "Beyonwiz::Utils",
    "File::Spec::Functions", "File::Find", "File::Basename", "HTTP::Status",
    "POSIX".

