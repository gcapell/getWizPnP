NAME

        use Beyonwiz::WizPnP;

SYNOPSIS

    Provides access data for the Beyonwiz devices on the local network using
    WizPnP.

CONSTANTS

    "DESC"
        The URL path part for the WizPnP device descriptor document on the
        Beyonwiz PVR ("tvdevicedesc.xml";

    "SSDPADDR"
        The IP multicast address used for Simple Service Discovery Protocol
        (SSDP) used to search for PnP devices (239.255.255.250).

    "SSDPPORT"
        The IP multicast port number used for Simple Service Discovery
        Protocol (SSDP) used to search for PnP devices (1900);

    "SSDPPEER"
        *SSDPADDR*:<SSDPPORT>; "239.255.255.250:1900"

         Beyonwiz WizPnP servers appear to only wait about 40ms

    "SSDPNPOLL"
        Default maximum number of SSDP search requests (3). Maximum time for
        a search to complete ~= SSDPNPOLL * SSDPTIMEOUT = 0.9 sec

    "SSDPMAXDELAY"
        Default maximum random delay (3 seconds, integer) that a responding
        SSDP server may insert before replying. The Beyonwiz WizPnP server
        seems to ignore this, and replys in about 35-40ms.

    "SSDPTIMEOUT"
        Default time to wait (0.3 sec) for an SSDP response. Should be >
        "SSDPMAXDELAY", but testing shows 0.3 sec to be adequate with
        "SSDPNPOLL" set to 3. See comment about response delay in
        "SSDPMAXDELAY".

    "SSDPPOLLTIME"
        Response polling timeout granularity (0.1 sec).

METHODS

    "Beyonwiz::WizPnP->new"
        Create a new Beyonwiz WizPnP search object.

    "$wpnp->maxDevs([$val]);"
        Returns (sets) the maximum number of devices to search for. If set
        to 0, the search is unlimited, and runs until it times out. Defaults
        to 0.

    "$wpnp->devices([$val]);"
        Returns (sets) the reference to the hash of discovered devices
        ("Beyonwiz::WizPnPDevice"), indexed by the lower-case version of the
        device name.

    "$wpnp->wizpnpPoll([$val]);"
        Returns (sets) the maximum number of search requests sent by
        "$wpnp->search();" before terminating the search. Defaults to
        "SSDPNPOLL".

    "$wpnp->wizpnpTimeout([$val]);"
        Returns (sets) the maximum timeout used when waiting for a respnse
        to a WizPnP SSDP device search request. Defaults to SSDPTIMEOUT sec.

    "$wpnp->httpTimeout([$val]);"
        Returns (sets) the timeout used when fetching the Beyonwiz device
        descriptor using HTTP. Defaults to "undef". When set to "undef" uses
        the "LWP" default timeout (180 sec).

    "$wpnp->cacheEnable([$val]);"
        Returns (sets) the enable flag for the device location lookup cache.
        Only has an effect if executed on a derived class that implements
        caching.

    "$wpnp->cacheLifetime([$val]);"
        Returns (sets) the lifetime of a Beyonwiz location cache entry in
        seconds. Only has an effect if executed on a derived class that
        implements caching.

    "$wpnp->deviceNames;"
        Returns the list of discovered device names. All lower-cased. No
        particular order.

    "$wpnp->device($name);"
        Return the named device's "Beyonwiz::WizPnPDevice" entry. Lookup is
        case-insensitive.

    "$wpnp->ndevices;"
        Returns the number of discovered devices.

    "$wpnp->addDevice($location);"
        Request the device description XML from the URL given in $location,
        and install the device "Beyonwiz::WizPnPDevice" into $wpnp.
        $location is typically the "LOCATION" header in the response to an
        SDDP "M-SEARCH" request.

        Returns the index name of the device (as in "$wpnp->deviceNames;")
        if successful, "undef" otherwise.

    "$wpnp->process($data);"
        Process an SDDP "M-SEARCH" response (or, for now, an SSDP "NOTIFY"
        message) in $data, and install the device pointed to by the
        "LOCATION" header in the message.

        Returns the index name of the device (as in "$wpnp->deviceNames;")
        if the message contained an installable SSDP device, "undef"
        otherwise.

    "$wpnp->search();"
        Search the local net for Beyonwiz PnP devices and install them in
        $wpnp.

        If "$wpnp->maxDevs" non-zero, terminate the search when
        "$self->maxDevs" devices have been installed, otherwise search until
        the search times out.

        Returns the number of devices found.

    "$wpnp->cacheFlush;"
        Clear the Beyonwiz location cache. Only has an effect if executed on
        a derived class that implements caching.

INTERNAL METHODS

    "$wpnp->_quietLocation([$val]);"
        Returns (sets) a flag to suppress some warning messages during
        device location specifier processing. Intended for use by derived
        clases when they are testing for the presence of a Beyonwiz device
        and will take recovery action.

    "$wpnp->_requestSock([$val]);"
        Returns (sets) the multicast socket on which WizPnP's SSDP search
        requests are sent. Normally set by "$wpnp->_openRequestSock();" and
        "$wpnp->_closeRequestSock();".

    "$wpnp->_responseSock([$val]);"
        Returns (sets) the socket on which WizPnP's SSDP search responses
        are received. Normally set by "$wpnp->_openResponseSock();" and
        "$wpnp->_closeResponseSock();".

    "$wpnp->_responsePort([$val]);"
        Returns (sets) the port on which WizPnP's SSDP search requests were
        sent and on which its responses are received. Normally set by
        "$wpnp->_openRequestSock();" and "$wpnp->_openRequestSock();".

    "$wpnp->_request([$val]);"
        Returns (sets) the "HTTP::Request" that will be sent by WizPnP's
        SSDP search requests. Normally set in the class constructor.

    "$wpnp->_openRequestSock;"
        Opens the multicast socket on which WizPnP's SSDP search requests
        are sent. Also sets "$wpnp->_requestSock;" and
        "$wpnp->_responsePort;"

    "$wpnp->_closeRequestSock;"
        Closes the socket on which WizPnP's SSDP search requests are sent.
        Sets "$wpnp->_requestSock;" to "undef".

    "$wpnp->_openResponseSock();"
        Opens the socket on which WizPnP's SSDP search responses are
        received. Sets "$wpnp->_responseSock;" to "undef".

    "$wpnp->_closeResponseSock();"
        Opens the socket on which WizPnP's SSDP search responses are
        received. Sets "$wpnp->_responseSock;" and "$wpnp->_responsePort;"
        to "undef".

    "Beyonwiz::WizPnP::_isMacOs"
        Returns true if the system runnung is MacOS X or Darwin.

PREREQUISITES

    Uses packages: "Beyonwiz::WizPnPDevice", "IO::Socket::Multicast",
    "IO::Select", "HTTP::Response", "HTTP::Request", "HTTP::Status",
    "LWP::Simple", "URI", "XML::DOM" "Time::HiRes".

BUGS

    "IO::Socket::Multicast" is not available in ActivePerl's PPM for
    Windows, see README.txt for a download location.

    "Beyonwiz::Recording::WizPnP->new" will die with a message suggesting
    workarounds if "IO::Socket::Multicast" can't be loaded.

