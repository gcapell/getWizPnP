NAME

        use Beyonwiz::Recording::Trunc;

SYNOPSIS

    Provides access to the Beyonwiz recording *trunc* file. The trunc file
    is used to describe exactly which parts of the 0000, 0001, etc. files
    are included in the viewable recording.

CONSTANTS

    "TRUNC"
        The *trunc* file name for the Beyonwiz ("trunc").

    "TRUNC_SIZE_MULT"
        The *trunc* file size should be a multiple of "TRUNC_SIZE_MULT".

    "WMMETA"
        The *wmmeta* file name for the Beyonwiz ("wmmeta").

    "WMMETA_SIZE"
        The size of *wmmeta* file.

METHODS

    "Beyonwiz::Recording::Trunc->new($accessor, $name, $path)"
        Create a new Beyonwiz recording file index object. $accessor is a
        reference to a "Beyonwiz::Recording::Accessor" used to carry out the
        media file access functions in "Beyonwiz::Recording::Header". $name
        is the default name of the recording (usually the name in the
        Beyonwiz recording index, see "Beyonwiz::Recording::IndexEntry".
        $path is the path to the source recording folder in $name, and can
        be a file system path or a URL depending on the type of $accessor.

    "$t->accessor([$val]);"
        Returns (sets) the media file accessor object reference.

    "$t->name([$val]);"
        Returns (sets) the default recording name.

    "$t->path([$val]);"
        Returns (sets) the source recording folder name.

    "$t->fileName([$val]);"
        Returns (sets) the name of the trunc file.

    "$s->beyonwizFileName([$val]);"
        Returns (sets) the name of the trunc file in the source.

    "$t->entries([$val]);"
        Returns (sets) the array reference containing the
        "Beyonwiz::Recording::TruncEntry" objects in for the recording.

    "$t->nentries;"
        Returns the number of entries in "$t->entries".

    "$t->size;"
        Returns the size of the last decoded trunc file.

    "$t->recordingSize([$nents]);"
        Returns the sum of all the *size* entries in the
        "Beyonwiz::Recording::TruncEntry" objects in for the recording.

        If $nents is set, returns the size of the first $nents entries in
        the table.

    "$t->load;"
        Loads the trunc data from the "trunc" or "wmmeta" file, depending on
        which is present in the recording or media file.

    "$t->valid;"
        Returns true if the last "$i->load;" or "$t->reconstruct($minScan,
        $maxScan, $targetLen);" succeeded.

    "$t->fileLenTime([$file])"
        Return the tuple *($len, $modifyTime)* for the trunc file. The
        modify time is a Unix timestamp (seconds since 00:00:00) Jan 1 1970
        UTC). If $file is specified, use that as the name of the trunc file,
        otherwise use "$t-"beyonwizFileName> for the name of the file.
        Returns "undef" if the data can't be found (access denied or file
        not found).

    "$t->reconstruct($minScan, $maxScan, $targetLen);"
        Attempts to reconstruct the *trunc* data from the recording data
        file names and sizes. $minScan and $maxScan are the minimum and
        maximum data file names (as integers) for the scan to find the first
        recording file name.

        $targetLen is a guess at the maximum size of the recording data,
        including an allowance for parts of the files that were edited out
        in the original trunc file.

        Sets "$t->valid;" and "$t->reconstructed;" to true if the
        reconsruction succeeded (even partially), otherwise sets it to
        "undef".

    "$s->reconstructed([$val]);"
        Returns (sets) a flag marking that the object represents a
        reconstructed file, and the file should be encoded from the object
        rather than being copied from the source.

        Reset whenever "$s->valid;" is reset. Set when
        "$t->reconstruct($targetLen);" succeeds.

    "$t->decode($hdr_data);"
        Load the contents of $t by decoding the "trunc" file data in
        $hdr_data.

    "$t->encodeTrunc;"
        Returns *trunc* file data for $t, ready for writing to a file.
        Should only be called if $t represents a *trunc* file.

    "$t->encodeWmmeta;"
        Returns *wmmeta* file data for $t, ready for writing to a file.
        Should only be called if $t represents a *wmmeta* file.

    "$t->truncStart($recOffset)"
        Return the location of the logical "offset" (counting from 0 at the
        start of the recording) as a (*truncIndex*, *fileOffset*) pair
        indicating which "Beyonwiz::Recording::TruncEntry" contains the
        position and the corresponding offset into the file.

    "$t->makeFileTrunc;"
        Return a new "Beyonwiz::Recording::HTTPTrunc" with a single
        "Beyonwiz::Recording::TruncEntry" for each file to be downloaded.
        The chunk file sizes and offsets are adjusted to have a single trunc
        representing the whole file. The "wizOffset" values are not
        particularly meaningful.

    "$t->fileTruncFromDir;"
        Return a new "Beyonwiz::Recording::FileTrunc" that reflect the files
        in the the directory pointed to by "$t->path([$val])".

PREREQUISITES

    Uses packages: "Beyonwiz::Recording::TruncEntry", "Beyonwiz::Utils",
    "File::Basename", "LWP::Simple", "URI", "URI::Escape",
    "File::Spec::Functions".

BUGS

    Uses "bignum" for 64-bit integers, even when the underlying Perl
    integers are 64 bits.

    Uses a fixed value for the path name of the index, rather than deriving
    it from *locationURL* in "Beyonwiz::WizPnP".

